substitutions:
  targetTemp: "22.0f"

preferences:
  flash_write_interval: 4min

globals: 
  - id: day_min
    type: float
    restore_value: true
    initial_value: '25'
  - id: day_max
    type: float
    restore_value: true
    initial_value: '20'
  - id: air_min
    type: float
    restore_value: true
    initial_value: '25'
  - id: air_max
    type: float
    restore_value: true
    initial_value: '20'    
   
interval:
  # adjust old min and max values 0.05°C per hour (1.2°C per day)
  # Air temperature the double value (2.4° per day)
  - interval: 1h
    then:
      - lambda: |-
          id(day_max) = id(day_max) - 0.05;
          id(day_min) = id(day_min) + 0.05;
          id(air_max) = id(air_max) - 0.1;
          id(air_min) = id(air_min) + 0.1;

  # EC Measurement for nutrition every 5 minutes
  - interval: 300s
    then:
      - switch.turn_on: ecPower
      - delay: 800ms
      - component.update: ecSensor
      - switch.turn_off: ecPower
      
  - interval: 60s
    then:
      - mqtt.publish:
          topic: hydroponics2024/alive
          payload: "alive"
      - mqtt.publish:
          topic: hydroponics2024/sensor/daymin
          payload: !lambda |-
            return std::to_string(id(day_min));
      - mqtt.publish:
          topic: hydroponics2024/sensor/daymax
          payload: !lambda |-
            return std::to_string(id(day_max));
      - mqtt.publish:
          topic: hydroponics2024/sensor/airmin
          payload: !lambda |-
            return std::to_string(id(air_min));
      - mqtt.publish:
          topic: hydroponics2024/sensor/airmax
          payload: !lambda |-
            return std::to_string(id(air_max));

  # Adjust the daymax, daymin, but not instantly
  - interval: 60s
    then:
      - globals.set:
          id: "day_max"
          value: !lambda return moving_max(id(water).state,id(day_max));

      - globals.set:
          id: "day_min"
          value: !lambda return moving_min(id(water).state,id(day_min));

      - globals.set:
          id: "air_max"
          value: !lambda return moving_max(id(air).state,id(air_max));

      - globals.set:
          id: "air_min"
          value: !lambda return moving_min(id(air).state,id(air_min));

  # Update the pumps
  - interval: 20s
    then:
      - lambda: |-  
          updatepumps();

# Individual sensors 

# for grafana output
sensor:
  - platform: template
    name: "pumping solar"
    accuracy_decimals: 0
    lambda: |- 
      if(id(solarpump).state){
        return 1;
      }else{
        return 0;
      }

  - platform: template
    name: "pumping buffer"
    accuracy_decimals: 0
    lambda: |- 
      if(id(bufferpump).state){
        return 1;
      }else{
        return 0;
      }


  ## TODO: use interval or anything else. Unclear where this is called
  # bootcount to avoid sending initial data
  - platform: template
    name: "bootcount"
    id: bootcount
    accuracy_decimals: 0
    lambda: |-
      if(isnan(id(bootcount).state)){
        return 0;
      }
      return id(bootcount).state + 1;

  # Calculation of tendences
  - platform: template
    name: "Tendence water"
    id: tendencewater
    accuracy_decimals: 2
    lambda: return calctendence((float)id(water).state,8.0f);
 
  - platform: template
    name: "Tendence max"
    id: tendencemax
    accuracy_decimals: 2
    lambda: return calctendence((float)id(day_max),8.0f);

  - platform: template
    name: "Tendence min"
    id: tendencemin
    accuracy_decimals: 2
    lambda: return calctendence(id(day_min),8.0f);

  - platform: template
    name: "Tendence air"
    id: tendenceair
    accuracy_decimals: 2
    lambda: return calctendence(id(air).state,12.0f);

  - platform: template
    name: "Tendenz air Median"
    id: tendenceairmedian
    accuracy_decimals: 2
    lambda: return calctendence((id(air_min)+id(air_max))/2.0f,12.0f);


  - platform: template
    name: "Tendenz Zeit"
    id: tendencetime
    accuracy_decimals: 2
    lambda: return calctimetendence();

  - platform: template
    name: "Tendenz Klima"
    id: tendenceclimate
    accuracy_decimals: 2
    filters:
    - filter_out: nan
    lambda: |-
      // Sum of weighting factors must be 1
      return id(tendencewater).state     * 0.4   +
             id(tendenceair).state       * 0.1   +
             id(tendenceairmedian).state * 0.2   +
             id(tendencemin).state       * 0.15  +
             id(tendencemax).state       * 0.15  +
             // Time comes on top... (how much?)
             id(tendencetime).state      * 0.2;

# MQTT
mqtt:
  broker: !secret mqtt_broker
  discovery: false
  
  birth_message:
    topic: myavailability/topic
    payload: online
  will_message:
    topic: myavailability/topic
    payload: offline

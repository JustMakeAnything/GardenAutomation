dallas:
  - pin: D7
    update_interval: 1500ms

sensor:
  - platform: dallas
    name: "Red temperature"
    address:  0x1b7a2d1e1e64ff28
    resolution: 10

  - platform: dallas
    name: "Blue temperature"
    address:  0xb848311e1e64ff28
    resolution: 10

  - platform: dallas
    name: "Yellow temperature"
    address:  0xa7383b1e1e64ff28
    resolution: 10

  - platform: dallas
    name: "solar temperature"
    address:  0x4800000696733828
    resolution: 10


  # - platform: adc
  #   pin: A0
  #   name: "EC Sensor"
  #   id: ecSensor
  #   accuracy_decimals: 3
  #   # Updates are controlled by an interval which controls
  #   # The power supply as well
  #   update_interval: never
  #   filters:
  #     - exponential_moving_average:
  #         alpha: 0.02
  #         send_every: 1
  #     - lambda: |-
  #         float R1 = 400;
  #         float Vin = 3.3;
  #         float K=1.3;
  #         //
  #         float Vdrop= Vin*x;
  #         float Rc=(Vdrop*R1)/(Vin-Vdrop);
  #         float EC= 1000/(Rc*K);      
  #         float EC25 =  EC/(1+  0.019*((id(wasser).state-25)));
  #         return EC25*1000;

#   35  1,00
#   80  1,00 
#  510  0,85
#  600  0,805
#  660  0,81
#  800  0,777
# 1054  0,77
# 1124  0,75
# 6000  0,63


  # - platform: dallas
  #   resolution: 11
  #   address: 0xcbed69f61e64ff28 
  #   filters:
  #   - filter_out: nan
  #   name: "Wassertemperatur"
  #   id: wasser
  #   on_value:
  #     then:
  #       lambda: |-
  #         float tendencetreshold = 0.05;
  #         if(id(bootcount).state<2){
  #           // No decision before all data is in (after 2 times booting)
  #           return;
  #         }
  #         float tendence = id(tendenceclimate).state;
  #         float wassert = id(wasser).state;
  #         float solart  = id(solar).state;
  #         auto turnOn = [](){
  #           id(usb).turn_on();
  #         };
  #         auto turnOff = [](){
  #           id(usb).turn_off();
  #         };
  #         if(abs(tendence)<tendencetreshold) {
  #           // No need to do anything. Turn off the pump
  #           ESP_LOGI("climate", "Nothing to do: water: %f",wassert);
  #           turnOff();
  #         }else{
  #           if(tendence >0){
  #             // Cooling
  #             ESP_LOGI("climate", "Cooling needed: water: %f",wassert);
  #             // Can I start cooling?
  #             if(wassert > (solart+2.5f)) {
  #               ESP_LOGI("climate", "cooling" );
  #               turnOn();
  #             }
  #             // Do I need to stop cooling?
  #             if(wassert < (solart+1.0f)) {
  #               ESP_LOGI("climate", "no cooling: solar %f to high",wassert - solart -1 );
  #               turnOff();
  #             }
  #           }else{
  #             // Heating
  #             ESP_LOGI("climate", "Heating needed: water: %f",wassert);
  #             // Can I start heating?
  #             if(wassert < (solart-1.4f)) {
  #               ESP_LOGI("climate", "heating" );
  #               turnOn();
  #             }
  #             // Do I need to stop heating?
  #             if(wassert > (solart-0.6f)) {
  #               ESP_LOGI("climate", "no heating: solar %f to low",solart - 1 - wassert );
  #               turnOff();
  #             }
  #           }
  #         }


  # - platform: dallas    
  #   resolution: 11
  #   address: 0x9c27311e1e64ff28
  #   filters:
  #   - filter_out: nan
  #   name: "Luft"
  #   id: luft
  # - platform: dallas    
  #   resolution: 11
  #   address: 0xfc0000077235fe28
  #   filters:
  #   - filter_out: nan
  #   name: "Solarheizung"
  #   id: solar
